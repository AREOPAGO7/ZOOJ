// Script de test pour v√©rifier la nouvelle logique de pr√©vention des doublons
// Ex√©cutez ce script dans la console du navigateur pour tester

console.log('üß™ Test de la nouvelle logique de pr√©vention des doublons...');

// Fonction de test qui peut √™tre appel√©e manuellement
async function testNotificationDuplicateFix() {
  try {
    console.log('üöÄ Test de la nouvelle logique...');
    
    // Import dynamique du service (si disponible)
    let eventNotificationService;
    
    try {
      // Essayer d'importer depuis le module
      const module = await import('./lib/eventNotificationService.js');
      eventNotificationService = module.eventNotificationService;
      console.log('‚úÖ Service import√© avec succ√®s');
    } catch (importError) {
      console.log('‚ö†Ô∏è Import du module √©chou√©, utilisation de la version globale');
      // Si le module n'est pas disponible, on utilise la version globale
      eventNotificationService = window.eventNotificationService;
    }
    
    if (!eventNotificationService) {
      console.error('‚ùå Service non disponible. V√©rifiez que le fichier est charg√©.');
      return;
    }
    
    // Test 1: Nettoyer le cache pour commencer proprement
    console.log('\nüßπ Test 1: Nettoyage du cache');
    eventNotificationService.clearCache();
    console.log('   ‚úÖ Cache nettoy√©');
    
    // Test 2: V√©rifier le statut initial du cache
    console.log('\nüìã Test 2: Statut initial du cache');
    const initialCacheStatus = eventNotificationService.getCacheStatus();
    console.log('   ‚Ä¢ Taille du cache:', initialCacheStatus.size);
    console.log('   ‚Ä¢ Entr√©es:', initialCacheStatus.entries);
    
    // Test 3: Premi√®re ex√©cution (devrait envoyer des notifications si des √©v√©nements existent)
    console.log('\nüîç Test 3: Premi√®re ex√©cution');
    console.log('Ex√©cution de checkTomorrowEventsAndNotify()...');
    const firstResult = await eventNotificationService.checkTomorrowEventsAndNotify();
    
    console.log('   ‚Ä¢ Premi√®re ex√©cution:');
    console.log('     - √âv√©nements trouv√©s:', firstResult.eventsFound);
    console.log('     - Notifications envoy√©es:', firstResult.notificationsSent);
    console.log('     - Erreurs:', firstResult.errors.length);
    
    // Test 4: V√©rifier le cache apr√®s la premi√®re ex√©cution
    console.log('\nüìã Test 4: Cache apr√®s premi√®re ex√©cution');
    const cacheAfterFirst = eventNotificationService.getCacheStatus();
    console.log('   ‚Ä¢ Taille du cache:', cacheAfterFirst.size);
    console.log('   ‚Ä¢ Entr√©es:', cacheAfterFirst.entries);
    
    // Test 5: Deuxi√®me ex√©cution (devrait utiliser le cache et ne pas envoyer de notifications)
    console.log('\nüîÑ Test 5: Deuxi√®me ex√©cution');
    console.log('Ex√©cution de checkTomorrowEventsAndNotify() une deuxi√®me fois...');
    const secondResult = await eventNotificationService.checkTomorrowEventsAndNotify();
    
    console.log('   ‚Ä¢ Deuxi√®me ex√©cution:');
    console.log('     - √âv√©nements trouv√©s:', secondResult.eventsFound);
    console.log('     - Notifications envoy√©es:', secondResult.notificationsSent);
    console.log('     - Erreurs:', secondResult.errors.length);
    
    // Test 6: Troisi√®me ex√©cution (pour √™tre s√ªr)
    console.log('\nüîÑ Test 6: Troisi√®me ex√©cution');
    console.log('Ex√©cution de checkTomorrowEventsAndNotify() une troisi√®me fois...');
    const thirdResult = await eventNotificationService.checkTomorrowEventsAndNotify();
    
    console.log('   ‚Ä¢ Troisi√®me ex√©cution:');
    console.log('     - √âv√©nements trouv√©s:', thirdResult.eventsFound);
    console.log('     - Notifications envoy√©es:', thirdResult.notificationsSent);
    console.log('     - Erreurs:', thirdResult.errors.length);
    
    // Test 7: V√©rifier que le cache a √©t√© utilis√©
    console.log('\n‚úÖ Test 7: V√©rification de l\'utilisation du cache');
    const totalNotifications = firstResult.notificationsSent + secondResult.notificationsSent + thirdResult.notificationsSent;
    const uniqueNotifications = firstResult.notificationsSent;
    
    if (totalNotifications === uniqueNotifications && firstResult.notificationsSent > 0) {
      console.log('   ‚úÖ SUCC√àS: Le cache a fonctionn√©!');
      console.log('   ‚Ä¢ Premi√®re ex√©cution:', firstResult.notificationsSent, 'notifications envoy√©es');
      console.log('   ‚Ä¢ Deuxi√®me ex√©cution:', secondResult.notificationsSent, 'notifications envoy√©es');
      console.log('   ‚Ä¢ Troisi√®me ex√©cution:', thirdResult.notificationsSent, 'notifications envoy√©es');
      console.log('   ‚Ä¢ Total:', totalNotifications, 'notifications (aucune en double)');
      console.log('   ‚Ä¢ Les notifications n\'ont pas √©t√© recr√©√©es gr√¢ce au cache');
    } else if (firstResult.notificationsSent === 0) {
      console.log('   üì≠ Aucune notification envoy√©e lors de la premi√®re ex√©cution');
      console.log('   ‚Ä¢ Cela peut √™tre normal s\'il n\'y a pas d\'√©v√©nements demain');
    } else {
      console.log('   ‚ö†Ô∏è Le cache pourrait ne pas fonctionner correctement');
      console.log('   ‚Ä¢ V√©rifiez les logs pour plus de d√©tails');
    }
    
    // Test 8: Statut final du cache
    console.log('\nüìä Test 8: Statut final du cache');
    const finalCacheStatus = eventNotificationService.getCacheStatus();
    console.log('   ‚Ä¢ Taille du cache:', finalCacheStatus.size);
    console.log('   ‚Ä¢ Entr√©es:', finalCacheStatus.entries);
    
    return {
      firstResult,
      secondResult,
      thirdResult,
      totalNotifications,
      uniqueNotifications,
      cacheStatus: finalCacheStatus,
      cacheWorking: totalNotifications === uniqueNotifications && firstResult.notificationsSent > 0
    };
    
  } catch (error) {
    console.error('üí• Erreur lors du test:', error);
    return null;
  }
}

// Fonction pour tester la v√©rification manuelle d'un √©v√©nement sp√©cifique
async function testSpecificEventCheck(eventId) {
  try {
    console.log(`üîç Test de v√©rification pour l'√©v√©nement sp√©cifique: ${eventId}`);
    
    let eventNotificationService;
    try {
      const module = await import('./lib/eventNotificationService.js');
      eventNotificationService = module.eventNotificationService;
    } catch (importError) {
      eventNotificationService = window.eventNotificationService;
    }
    
    if (!eventNotificationService) {
      console.error('‚ùå Service non disponible');
      return;
    }
    
    // Test de la fonction checkIfAlreadyNotified pour un √©v√©nement sp√©cifique
    const result = await eventNotificationService.checkIfAlreadyNotified(eventId, 'tomorrow_reminder');
    
    console.log(`   ‚Ä¢ √âv√©nement ${eventId}: ${result ? 'D√©j√† notifi√©' : 'Pas encore notifi√©'}`);
    
    return result;
    
  } catch (error) {
    console.error('üí• Erreur lors du test sp√©cifique:', error);
    return null;
  }
}

// Fonction pour v√©rifier les notifications existantes dans la base de donn√©es
async function checkExistingNotifications() {
  try {
    console.log('üìã V√©rification des notifications existantes dans la base de donn√©es...');
    
    // V√©rifier que Supabase est disponible
    if (typeof window.supabase === 'undefined') {
      console.error('‚ùå Supabase n\'est pas disponible dans le contexte global');
      return false;
    }
    
    const today = new Date().toISOString().split('T')[0];
    console.log(`   ‚Ä¢ Date d'aujourd'hui: ${today}`);
    
    // R√©cup√©rer toutes les notifications d'√©v√©nements d'aujourd'hui
    const { data: notifications, error } = await window.supabase
      .from('notifications')
      .select('id, title, message, data, created_at')
      .eq('type', 'event')
      .gte('created_at', today)
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des notifications:', error);
      return false;
    }
    
    console.log(`   ‚Ä¢ Nombre de notifications d'√©v√©nements aujourd'hui: ${notifications?.length || 0}`);
    
    if (notifications && notifications.length > 0) {
      console.log('   ‚Ä¢ D√©tails des notifications:');
      notifications.forEach((notification, index) => {
        console.log(`     ${index + 1}. ID: ${notification.id}`);
        console.log(`        Titre: ${notification.title}`);
        console.log(`        Donn√©es:`, notification.data);
        console.log(`        Cr√©√©: ${notification.created_at}`);
        console.log('');
      });
    }
    
    return notifications;
    
  } catch (error) {
    console.error('üí• Erreur lors de la v√©rification des notifications:', error);
    return null;
  }
}

// Exposer les fonctions globalement pour les tests
window.testNotificationDuplicateFix = testNotificationDuplicateFix;
window.testSpecificEventCheck = testSpecificEventCheck;
window.checkExistingNotifications = checkExistingNotifications;

console.log('\n‚úÖ Script de test de pr√©vention des doublons charg√©!');
console.log('Fonctions disponibles:');
console.log('  ‚Ä¢ testNotificationDuplicateFix() - Test complet de la nouvelle logique');
console.log('  ‚Ä¢ testSpecificEventCheck(eventId) - Test pour un √©v√©nement sp√©cifique');
console.log('  ‚Ä¢ checkExistingNotifications() - V√©rifier les notifications existantes');
console.log('\nüí° Commencez par: testNotificationDuplicateFix()');
console.log('üí° Pour v√©rifier les notifications existantes: checkExistingNotifications()');
console.log('üí° Pour tester un √©v√©nement sp√©cifique: testSpecificEventCheck("EVENT_ID")');
