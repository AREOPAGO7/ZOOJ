// Script de test simple pour v√©rifier le service de notifications d'√©v√©nements apr√®s correction
// Ex√©cutez ce script dans la console du navigateur pour tester

console.log('üß™ Test du service de notifications d\'√©v√©nements apr√®s correction...');

// Fonction de test qui peut √™tre appel√©e manuellement
async function testEventNotificationService() {
  try {
    console.log('üöÄ Test du service...');
    
    // Import dynamique du service (si disponible)
    let eventNotificationService;
    
    try {
      // Essayer d'importer depuis le module
      const module = await import('./lib/eventNotificationService.js');
      eventNotificationService = module.eventNotificationService;
      console.log('‚úÖ Service import√© avec succ√®s');
    } catch (importError) {
      console.log('‚ö†Ô∏è Import du module √©chou√©, utilisation de la version globale');
      // Si le module n'est pas disponible, on utilise la version globale
      eventNotificationService = window.eventNotificationService;
    }
    
    if (!eventNotificationService) {
      console.error('‚ùå Service non disponible. V√©rifiez que le fichier est charg√©.');
      return;
    }
    
    // Test 1: V√©rifier que le service a les bonnes m√©thodes
    console.log('\nüìä Test 1: V√©rification des m√©thodes du service');
    const methods = Object.getOwnPropertyNames(eventNotificationService);
    console.log('   ‚Ä¢ M√©thodes disponibles:', methods);
    
    const requiredMethods = [
      'checkTomorrowEventsAndNotify',
      'sendTomorrowEventNotification',
      'checkIfAlreadyNotified',
      'markEventAsNotified',
      'clearCache',
      'getCacheStatus',
      'getUpcomingEvents'
    ];
    
    const missingMethods = requiredMethods.filter(method => !methods.includes(method));
    if (missingMethods.length === 0) {
      console.log('   ‚úÖ Toutes les m√©thodes requises sont pr√©sentes');
    } else {
      console.log('   ‚ùå M√©thodes manquantes:', missingMethods);
    }
    
    // Test 2: V√©rifier le statut initial du cache
    console.log('\nüìã Test 2: Statut initial du cache');
    try {
      const initialCacheStatus = eventNotificationService.getCacheStatus();
      console.log('   ‚Ä¢ Taille du cache:', initialCacheStatus.size);
      console.log('   ‚Ä¢ Entr√©es:', initialCacheStatus.entries);
      console.log('   ‚úÖ M√©thode getCacheStatus fonctionne');
    } catch (error) {
      console.error('   ‚ùå Erreur avec getCacheStatus:', error);
    }
    
    // Test 3: Tester le nettoyage du cache
    console.log('\nüßπ Test 3: Nettoyage du cache');
    try {
      eventNotificationService.clearCache();
      const cacheAfterClear = eventNotificationService.getCacheStatus();
      console.log('   ‚Ä¢ Cache apr√®s nettoyage:', cacheAfterClear.size, 'entr√©es');
      console.log('   ‚úÖ M√©thode clearCache fonctionne');
    } catch (error) {
      console.error('   ‚ùå Erreur avec clearCache:', error);
    }
    
    // Test 4: V√©rifier la structure de l'interface Event
    console.log('\nüèóÔ∏è Test 4: V√©rification de l\'interface Event');
    try {
      // Essayer d'acc√©der √† l'interface (si disponible)
      if (module && module.Event) {
        console.log('   ‚úÖ Interface Event disponible');
        console.log('   ‚Ä¢ Propri√©t√©s:', Object.keys(module.Event));
      } else {
        console.log('   ‚ö†Ô∏è Interface Event non accessible (normal en JavaScript)');
      }
    } catch (error) {
      console.log('   ‚ö†Ô∏è Interface Event non accessible (normal en JavaScript)');
    }
    
    // Test 5: V√©rifier que le service peut √™tre appel√©
    console.log('\nüîç Test 5: V√©rification de l\'appel du service');
    try {
      // Ne pas ex√©cuter r√©ellement, juste v√©rifier que la m√©thode existe
      if (typeof eventNotificationService.checkTomorrowEventsAndNotify === 'function') {
        console.log('   ‚úÖ M√©thode checkTomorrowEventsAndNotify est une fonction');
        console.log('   ‚Ä¢ Signature:', eventNotificationService.checkTomorrowEventsAndNotify.toString().slice(0, 100) + '...');
      } else {
        console.log('   ‚ùå M√©thode checkTomorrowEventsAndNotify n\'est pas une fonction');
      }
    } catch (error) {
      console.error('   ‚ùå Erreur lors de la v√©rification:', error);
    }
    
    console.log('\nüéØ Test termin√© avec succ√®s!');
    console.log('‚úÖ Le service semble fonctionner correctement apr√®s la correction');
    
    return {
      success: true,
      methods: methods,
      cacheWorking: true
    };
    
  } catch (error) {
    console.error('üí• Erreur lors du test:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// Fonction pour v√©rifier le statut du cache
async function checkCacheStatus() {
  try {
    console.log('üìã V√©rification du statut du cache...');
    
    let eventNotificationService;
    try {
      const module = await import('./lib/eventNotificationService.js');
      eventNotificationService = module.eventNotificationService;
    } catch (importError) {
      eventNotificationService = window.eventNotificationService;
    }
    
    if (!eventNotificationService) {
      console.error('‚ùå Service non disponible');
      return;
    }
    
    const cacheStatus = eventNotificationService.getCacheStatus();
    console.log('   ‚Ä¢ Taille du cache:', cacheStatus.size);
    console.log('   ‚Ä¢ Entr√©es:', cacheStatus.entries);
    
    return cacheStatus;
    
  } catch (error) {
    console.error('üí• Erreur lors de la v√©rification du cache:', error);
    return null;
  }
}

// Fonction pour nettoyer le cache
async function clearCache() {
  try {
    console.log('üßπ Nettoyage du cache...');
    
    let eventNotificationService;
    try {
      const module = await import('./lib/eventNotificationService.js');
      eventNotificationService = module.eventNotificationService;
    } catch (importError) {
      eventNotificationService = window.eventNotificationService;
    }
    
    if (!eventNotificationService) {
      console.error('‚ùå Service non disponible');
      return;
    }
    
    eventNotificationService.clearCache();
    console.log('‚úÖ Cache nettoy√© avec succ√®s');
    
  } catch (error) {
    console.error('üí• Erreur lors du nettoyage du cache:', error);
  }
}

// Exposer les fonctions globalement pour les tests
window.testEventNotificationService = testEventNotificationService;
window.checkCacheStatus = checkCacheStatus;
window.clearCache = clearCache;

console.log('\n‚úÖ Script de test apr√®s correction charg√©!');
console.log('Fonctions disponibles:');
console.log('  ‚Ä¢ testEventNotificationService() - Test complet du service corrig√©');
console.log('  ‚Ä¢ checkCacheStatus() - V√©rifier le statut du cache');
console.log('  ‚Ä¢ clearCache() - Nettoyer le cache');
console.log('\nüí° Commencez par: testEventNotificationService()');
console.log('üí° Pour v√©rifier le cache: checkCacheStatus()');
console.log('üí° Pour nettoyer le cache: clearCache()');
