// Script de test pour v√©rifier le syst√®me de cache des notifications d'√©v√©nements
// Ex√©cutez ce script dans la console du navigateur pour tester

console.log('üß™ Test du syst√®me de cache des notifications d\'√©v√©nements...');

// Fonction de test qui peut √™tre appel√©e manuellement
async function testEventNotificationCache() {
  try {
    console.log('üöÄ Test du syst√®me de cache...');
    
    // Import dynamique du service (si disponible)
    let eventNotificationService;
    
    try {
      // Essayer d'importer depuis le module
      const module = await import('./lib/eventNotificationService.js');
      eventNotificationService = module.eventNotificationService;
      console.log('‚úÖ Service import√© avec succ√®s');
    } catch (importError) {
      console.log('‚ö†Ô∏è Import du module √©chou√©, utilisation de la version globale');
      // Si le module n'est pas disponible, on utilise la version globale
      eventNotificationService = window.eventNotificationService;
    }
    
    if (!eventNotificationService) {
      console.error('‚ùå Service non disponible. V√©rifiez que le fichier est charg√©.');
      return;
    }
    
    // Test 1: V√©rifier le statut initial du cache
    console.log('\nüìä Test 1: Statut initial du cache');
    const initialCacheStatus = eventNotificationService.getCacheStatus();
    console.log('   ‚Ä¢ Taille du cache:', initialCacheStatus.size);
    console.log('   ‚Ä¢ Entr√©es:', initialCacheStatus.entries);
    
    // Test 2: Premi√®re v√©rification des √©v√©nements
    console.log('\nüîç Test 2: Premi√®re v√©rification des √©v√©nements');
    console.log('Ex√©cution de checkTomorrowEventsAndNotify()...');
    const firstResult = await eventNotificationService.checkTomorrowEventsAndNotify();
    
    console.log('   ‚Ä¢ Premi√®re ex√©cution:');
    console.log('     - √âv√©nements trouv√©s:', firstResult.eventsFound);
    console.log('     - Notifications envoy√©es:', firstResult.notificationsSent);
    console.log('     - Erreurs:', firstResult.errors.length);
    
    // Test 3: V√©rifier le cache apr√®s la premi√®re ex√©cution
    console.log('\nüìã Test 3: Cache apr√®s premi√®re ex√©cution');
    const cacheAfterFirst = eventNotificationService.getCacheStatus();
    console.log('   ‚Ä¢ Taille du cache:', cacheAfterFirst.size);
    console.log('   ‚Ä¢ Entr√©es:', cacheAfterFirst.entries);
    
    // Test 4: Deuxi√®me v√©rification (devrait utiliser le cache)
    console.log('\nüîÑ Test 4: Deuxi√®me v√©rification (devrait utiliser le cache)');
    console.log('Ex√©cution de checkTomorrowEventsAndNotify() une deuxi√®me fois...');
    const secondResult = await eventNotificationService.checkTomorrowEventsAndNotify();
    
    console.log('   ‚Ä¢ Deuxi√®me ex√©cution:');
    console.log('     - √âv√©nements trouv√©s:', secondResult.eventsFound);
    console.log('     - Notifications envoy√©es:', secondResult.notificationsSent);
    console.log('     - Erreurs:', secondResult.errors.length);
    
    // Test 5: V√©rifier que le cache a √©t√© utilis√©
    console.log('\n‚úÖ Test 5: V√©rification de l\'utilisation du cache');
    if (secondResult.notificationsSent === 0 && firstResult.notificationsSent > 0) {
      console.log('   ‚úÖ SUCC√àS: Le cache a fonctionn√©!');
      console.log('   ‚Ä¢ Premi√®re ex√©cution:', firstResult.notificationsSent, 'notifications envoy√©es');
      console.log('   ‚Ä¢ Deuxi√®me ex√©cution:', secondResult.notificationsSent, 'notifications envoy√©es');
      console.log('   ‚Ä¢ Les notifications n\'ont pas √©t√© recr√©√©es gr√¢ce au cache');
    } else if (firstResult.notificationsSent === 0) {
      console.log('   üì≠ Aucune notification envoy√©e lors de la premi√®re ex√©cution');
      console.log('   ‚Ä¢ Cela peut √™tre normal s\'il n\'y a pas d\'√©v√©nements demain');
    } else {
      console.log('   ‚ö†Ô∏è Le cache pourrait ne pas fonctionner correctement');
      console.log('   ‚Ä¢ V√©rifiez les logs pour plus de d√©tails');
    }
    
    // Test 6: Statut final du cache
    console.log('\nüìä Test 6: Statut final du cache');
    const finalCacheStatus = eventNotificationService.getCacheStatus();
    console.log('   ‚Ä¢ Taille du cache:', finalCacheStatus.size);
    console.log('   ‚Ä¢ Entr√©es:', finalCacheStatus.entries);
    
    // Test 7: Nettoyer le cache
    console.log('\nüßπ Test 7: Nettoyage du cache');
    eventNotificationService.clearCache();
    const cacheAfterClear = eventNotificationService.getCacheStatus();
    console.log('   ‚Ä¢ Cache apr√®s nettoyage:', cacheAfterClear.size, 'entr√©es');
    
    return {
      firstResult,
      secondResult,
      cacheStatus: finalCacheStatus,
      cacheWorking: secondResult.notificationsSent === 0 && firstResult.notificationsSent > 0
    };
    
  } catch (error) {
    console.error('üí• Erreur lors du test:', error);
    return null;
  }
}

// Fonction pour v√©rifier le statut du cache
async function checkCacheStatus() {
  try {
    console.log('üìã V√©rification du statut du cache...');
    
    let eventNotificationService;
    try {
      const module = await import('./lib/eventNotificationService.js');
      eventNotificationService = module.eventNotificationService;
    } catch (importError) {
      eventNotificationService = window.eventNotificationService;
    }
    
    if (!eventNotificationService) {
      console.error('‚ùå Service non disponible');
      return;
    }
    
    const cacheStatus = eventNotificationService.getCacheStatus();
    console.log('   ‚Ä¢ Taille du cache:', cacheStatus.size);
    console.log('   ‚Ä¢ Entr√©es:', cacheStatus.entries);
    
    return cacheStatus;
    
  } catch (error) {
    console.error('üí• Erreur lors de la v√©rification du cache:', error);
    return null;
  }
}

// Fonction pour nettoyer le cache
async function clearCache() {
  try {
    console.log('üßπ Nettoyage du cache...');
    
    let eventNotificationService;
    try {
      const module = await import('./lib/eventNotificationService.js');
      eventNotificationService = module.eventNotificationService;
    } catch (importError) {
      eventNotificationService = window.eventNotificationService;
    }
    
    if (!eventNotificationService) {
      console.error('‚ùå Service non disponible');
      return;
    }
    
    eventNotificationService.clearCache();
    console.log('‚úÖ Cache nettoy√© avec succ√®s');
    
  } catch (error) {
    console.error('üí• Erreur lors du nettoyage du cache:', error);
  }
}

// Fonction pour tester la pr√©vention des doublons
async function testDuplicatePrevention() {
  try {
    console.log('üõ°Ô∏è Test de la pr√©vention des doublons...');
    
    let eventNotificationService;
    try {
      const module = await import('./lib/eventNotificationService.js');
      eventNotificationService = module.eventNotificationService;
    } catch (importError) {
      eventNotificationService = window.eventNotificationService;
    }
    
    if (!eventNotificationService) {
      console.error('‚ùå Service non disponible');
      return;
    }
    
    // Ex√©cuter plusieurs fois de suite
    console.log('   ‚Ä¢ Ex√©cution 1...');
    const result1 = await eventNotificationService.checkTomorrowEventsAndNotify();
    
    console.log('   ‚Ä¢ Ex√©cution 2...');
    const result2 = await eventNotificationService.checkTomorrowEventsAndNotify();
    
    console.log('   ‚Ä¢ Ex√©cution 3...');
    const result3 = await eventNotificationService.checkTomorrowEventsAndNotify();
    
    console.log('\nüìä R√©sultats:');
    console.log('   ‚Ä¢ Ex√©cution 1:', result1.notificationsSent, 'notifications');
    console.log('   ‚Ä¢ Ex√©cution 2:', result2.notificationsSent, 'notifications');
    console.log('   ‚Ä¢ Ex√©cution 3:', result3.notificationsSent, 'notifications');
    
    const totalNotifications = result1.notificationsSent + result2.notificationsSent + result3.notificationsSent;
    const uniqueNotifications = result1.notificationsSent;
    
    if (totalNotifications === uniqueNotifications) {
      console.log('‚úÖ SUCC√àS: Aucune notification en double!');
    } else {
      console.log('‚ö†Ô∏è ATTENTION: Des notifications en double ont √©t√© d√©tect√©es');
    }
    
    return { result1, result2, result3, totalNotifications, uniqueNotifications };
    
  } catch (error) {
    console.error('üí• Erreur lors du test de pr√©vention des doublons:', error);
    return null;
  }
}

// Exposer les fonctions globalement pour les tests
window.testEventNotificationCache = testEventNotificationCache;
window.checkCacheStatus = checkCacheStatus;
window.clearCache = clearCache;
window.testDuplicatePrevention = testDuplicatePrevention;

console.log('\n‚úÖ Script de test du cache charg√©!');
console.log('Fonctions disponibles:');
console.log('  ‚Ä¢ testEventNotificationCache() - Test complet du syst√®me de cache');
console.log('  ‚Ä¢ checkCacheStatus() - V√©rifier le statut du cache');
console.log('  ‚Ä¢ clearCache() - Nettoyer le cache');
console.log('  ‚Ä¢ testDuplicatePrevention() - Tester la pr√©vention des doublons');
console.log('\nüí° Commencez par: testEventNotificationCache()');
console.log('üí° Pour v√©rifier le cache: checkCacheStatus()');
console.log('üí° Pour nettoyer le cache: clearCache()');
