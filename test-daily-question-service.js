// Script de test simple pour le service de notifications des questions quotidiennes
// Ex√©cutez ce script dans la console du navigateur

console.log('üß™ Test simple du service de notifications des questions quotidiennes...');

// Fonction de test qui peut √™tre appel√©e manuellement
async function testDailyQuestionNotifications() {
  try {
    console.log('üöÄ Test manuel du service...');
    
    // Import dynamique du service (si disponible)
    let dailyQuestionNotificationService;
    
    try {
      // Essayer d'importer depuis le module
      const module = await import('./lib/dailyQuestionNotificationService.js');
      dailyQuestionNotificationService = module.dailyQuestionNotificationService;
      console.log('‚úÖ Service import√© avec succ√®s');
    } catch (importError) {
      console.log('‚ö†Ô∏è Import du module √©chou√©, utilisation de la version globale');
      // Si le module n'est pas disponible, on utilise la version globale
      dailyQuestionNotificationService = window.dailyQuestionNotificationService;
    }
    
    if (!dailyQuestionNotificationService) {
      console.error('‚ùå Service non disponible. V√©rifiez que le fichier est charg√©.');
      return;
    }
    
    // Ex√©cuter la v√©rification
    console.log('üîç Ex√©cution de la v√©rification...');
    const result = await dailyQuestionNotificationService.checkNewDailyQuestionsAndNotify();
    
    // Afficher les r√©sultats
    console.log('\nüìä R√©sultats du test:');
    console.log('   ‚Ä¢ Questions trouv√©es:', result.questionsFound);
    console.log('   ‚Ä¢ Notifications envoy√©es:', result.notificationsSent);
    console.log('   ‚Ä¢ Erreurs:', result.errors.length);
    
    if (result.errors.length > 0) {
      console.log('\n‚ùå Erreurs:');
      result.errors.forEach((error, index) => {
        console.log(`   ${index + 1}. ${error}`);
      });
    }
    
    if (result.notificationsSent > 0) {
      console.log('\nüéâ Succ√®s! Des notifications ont √©t√© envoy√©es.');
    } else if (result.questionsFound > 0) {
      console.log('\nüìã Questions trouv√©es mais pas de nouvelles notifications n√©cessaires.');
    } else {
      console.log('\nüì≠ Aucune nouvelle question quotidienne trouv√©e pour aujourd\'hui.');
    }
    
    return result;
    
  } catch (error) {
    console.error('üí• Erreur lors du test:', error);
    return null;
  }
}

// Fonction de test rapide
async function quickTest() {
  console.log('‚ö° Test rapide...');
  const result = await testDailyQuestionNotifications();
  return result;
}

// Fonction pour v√©rifier la structure de la base de donn√©es
async function checkDatabaseStructure() {
  console.log('üèóÔ∏è V√©rification de la structure de la base de donn√©es...');
  
  try {
    // V√©rifier que Supabase est disponible
    if (typeof window.supabase === 'undefined') {
      console.error('‚ùå Supabase n\'est pas disponible dans le contexte global');
      return false;
    }
    
    console.log('‚úÖ Supabase disponible');
    
    // V√©rifier la table daily_questions
    const { data: dailyQuestions, error: dqError } = await window.supabase
      .from('daily_questions')
      .select('*')
      .limit(1);
    
    if (dqError) {
      console.error('‚ùå Erreur lors de l\'acc√®s √† daily_questions:', dqError);
      return false;
    }
    
    console.log('‚úÖ Table daily_questions accessible');
    
    // V√©rifier la table questions
    const { data: questions, error: qError } = await window.supabase
      .from('questions')
      .select('*')
      .limit(1);
    
    if (qError) {
      console.error('‚ùå Erreur lors de l\'acc√®s √† questions:', qError);
      return false;
    }
    
    console.log('‚úÖ Table questions accessible');
    
    // V√©rifier la table couples
    const { data: couples, error: cError } = await window.supabase
      .from('couples')
      .select('*')
      .limit(1);
    
    if (cError) {
      console.error('‚ùå Erreur lors de l\'acc√®s √† couples:', cError);
      return false;
    }
    
    console.log('‚úÖ Table couples accessible');
    
    // V√©rifier la table notifications
    const { data: notifications, error: nError } = await window.supabase
      .from('notifications')
      .select('*')
      .limit(1);
    
    if (nError) {
      console.error('‚ùå Erreur lors de l\'acc√®s √† notifications:', nError);
      return false;
    }
    
    console.log('‚úÖ Table notifications accessible');
    
    console.log('üéØ Structure de la base de donn√©es v√©rifi√©e avec succ√®s!');
    return true;
    
  } catch (error) {
    console.error('üí• Erreur lors de la v√©rification de la structure:', error);
    return false;
  }
}

// Fonction pour cr√©er une question de test
async function createTestQuestion() {
  console.log('‚ùì Cr√©ation d\'une question de test...');
  
  try {
    // Cr√©er une question dans la table questions
    const { data: question, error: qError } = await window.supabase
      .from('questions')
      .insert({
        content: 'Question de test: Comment s\'est pass√©e votre journ√©e ?',
        scheduled_time: '09:00:00'
      })
      .select()
      .single();
    
    if (qError) {
      console.error('‚ùå Erreur lors de la cr√©ation de la question:', qError);
      return null;
    }
    
    console.log('‚úÖ Question cr√©√©e:', question);
    
    // R√©cup√©rer un couple existant
    const { data: couple, error: cError } = await window.supabase
      .from('couples')
      .select('id')
      .limit(1)
      .single();
    
    if (cError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du couple:', cError);
      return null;
    }
    
    console.log('‚úÖ Couple r√©cup√©r√©:', couple);
    
    // Cr√©er une question quotidienne pour aujourd\'hui
    const { data: dailyQuestion, error: dqError } = await window.supabase
      .from('daily_questions')
      .insert({
        couple_id: couple.id,
        question_id: question.id,
        scheduled_for: new Date().toISOString().split('T')[0]
      })
      .select()
      .single();
    
    if (dqError) {
      console.error('‚ùå Erreur lors de la cr√©ation de la question quotidienne:', dqError);
      return null;
    }
    
    console.log('‚úÖ Question quotidienne cr√©√©e:', dailyQuestion);
    console.log('üéØ Question de test cr√©√©e avec succ√®s!');
    
    return { question, dailyQuestion };
    
  } catch (error) {
    console.error('üí• Erreur lors de la cr√©ation de la question de test:', error);
    return null;
  }
}

// Exposer les fonctions globalement pour les tests
window.testDailyQuestionNotifications = testDailyQuestionNotifications;
window.quickTest = quickTest;
window.checkDatabaseStructure = checkDatabaseStructure;
window.createTestQuestion = createTestQuestion;

console.log('\n‚úÖ Script de test charg√©!');
console.log('Fonctions disponibles:');
console.log('  ‚Ä¢ testDailyQuestionNotifications() - Test complet du service');
console.log('  ‚Ä¢ quickTest() - Test rapide');
console.log('  ‚Ä¢ checkDatabaseStructure() - V√©rifier la structure de la DB');
console.log('  ‚Ä¢ createTestQuestion() - Cr√©er une question de test');
console.log('\nüí° Commencez par: checkDatabaseStructure()');
